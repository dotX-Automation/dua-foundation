# ARMv8 basic DUA base unit.
#
# Roberto Masocco <r.masocco@dotxautomation.com>
#
# March 4, 2023

# Copyright 2024 dotX Automation s.r.l.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# BUILD THIS WITH:
# --network host

# Start from an arm64/v8 Ubuntu 22.04 image
FROM --platform=linux/arm64/v8 ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# Create internal users group
RUN groupadd -r internal

# Install basic utilities, dependencies, and development tools
# These include:
# - C/C++ toolchain and debuggers
# - Python 3 interpreter, testers, basic modules and scientific libraries
# - Linters
# - OpenCV dependencies for ARMv8 systems
# - Boost C++ libraries
# - System utilities
# - Zsh shell
RUN apt-get update && apt-get install -y --no-install-recommends \
  apt-utils \
  build-essential \
  ca-certificates \
  ccache \
  cmake \
  cppcheck \
  curl \
  dialog \
  dirmngr \
  dmidecode \
  file \
  fuse \
  g++ \
  gcc \
  gdb \
  git \
  gnupg2 \
  gstreamer1.0-tools \
  htop \
  iproute2 \
  less \
  lcov \
  libasio-dev \
  libatlas-base-dev \
  libavcodec-dev \
  libavformat-dev \
  libblas-dev \
  libboost-all-dev \
  libcanberra-gtk* \
  libdc1394-dev \
  libfaac-dev \
  libgflags-dev \
  libgeographic-dev \
  libgstreamer1.0-dev \
  libgstreamer-plugins-base1.0-dev \
  libgtk2.0-dev \
  libgtk-3-dev \
  libhdf5-dev \
  libjpeg-dev \
  liblapack-dev \
  libmp3lame-dev \
  libopenblas-dev \
  libopencore-amrnb-dev \
  libpng-dev \
  libprotobuf-dev \
  libswscale-dev \
  libtbb2 \
  libtbb-dev \
  libtheora-dev \
  libtiff-dev \
  libtinyxml2-dev \
  libv4l-dev \
  libvorbis-dev \
  libx264-dev \
  libxml2-utils \
  libxvidcore-dev \
  locales \
  lsb-core \
  lsb-release \
  make \
  manpages-dev \
  manpages-posix-dev \
  minicom \
  nano \
  ninja-build \
  openssh-client \
  pkg-config \
  protobuf-compiler \
  python-dev-is-python3 \
  python-is-python3 \
  python3 \
  python3-argcomplete \
  python3-autopep8 \
  python3-dev \
  python3-numpy \
  python3-pip \
  python3-pygments \
  python3-pytest-pylint \
  python3-vcstools \
  python3-venv \
  screen \
  shellcheck \
  software-properties-common \
  sudo \
  uncrustify \
  unzip \
  v4l-utils \
  valgrind \
  vim \
  wget \
  whois \
  zip \
  zsh \
  zsh-doc && \
  add-apt-repository universe && \
  apt-get autoremove -y && \
  apt-get autoclean && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Configure Git to accept different ownerships for local repository clones
RUN git config --system --add safe.directory '*'

# Install Java 11
RUN apt-get update && apt-get install -y --no-install-recommends \
  ant \
  openjdk-11-jre \
  openjdk-11-jdk \
  libvecmath-java && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/* && \
  update-alternatives --set java $(update-alternatives --list java | grep "java-11")

# Create a Python virtual environment and install packages in it
WORKDIR /opt
RUN --mount=type=bind,source=requirements.txt,target=/opt/requirements.txt \
  python3 -m venv --system-site-packages dua-venv && \
  . dua-venv/bin/activate && \
  pip install -U -r requirements.txt && \
  chgrp -R internal /opt/dua-venv && \
  chmod -R g+rw /opt/dua-venv
WORKDIR /root

# Ensure that the Python environment is correctly sourced
# NOTE: System path is the output of:
# python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"
ENV PYTHONPATH=/opt/dua-venv/lib/python3.10/site-packages:/usr/lib/python3/dist-packages${PYTHONPATH:+:${PYTHONPATH}}

# Configure language and locale
RUN locale-gen en_US.UTF-8 && \
  update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8

# Install ROS 2 Humble Hawksbill base
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu jammy main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt-get update && apt-get install -y --no-install-recommends \
  python3-colcon-argcomplete \
  python3-colcon-common-extensions \
  python3-colcon-mixin \
  python3-rosdep \
  ros-humble-ament-lint \
  ros-humble-angles \
  ros-humble-cv-bridge \
  ros-humble-diagnostic-msgs \
  ros-humble-diagnostic-updater \
  ros-humble-eigen3-cmake-module \
  ros-humble-filters \
  ros-humble-geographic-msgs \
  ros-humble-geographic-info \
  ros-humble-gps-msgs \
  ros-humble-gps-tools \
  ros-humble-gps-umd \
  ros-humble-gpsd-client \
  ros-humble-image-common \
  ros-humble-image-geometry \
  ros-humble-image-pipeline \
  ros-humble-image-transport \
  ros-humble-image-transport-plugins \
  ros-humble-laser-filters \
  ros-humble-launch-testing \
  ros-humble-launch-testing-ament-cmake \
  ros-humble-launch-testing-ros \
  ros-humble-perception-pcl \
  ros-humble-ros-base \
  ros-humble-vision-msgs \
  ros-humble-vision-opencv \
  ros-humble-xacro && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Configure ROS Middleware implementation to use
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# Build and install Eigen3
WORKDIR /opt
RUN git clone --single-branch --branch '3.4.0' --depth 1 https://gitlab.com/libeigen/eigen.git && \
  cd eigen && \
  mkdir build && \
  cd build && \
  cmake -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
  make -j$(nproc --all) && \
  make install && \
  cd .. && \
  rm -rf build && \
  chgrp -R internal /opt/eigen && \
  chmod -R g+rw /opt/eigen
WORKDIR /root

# Build and install OpenCV (with extra modules aka "contrib")
WORKDIR /opt
RUN . dua-venv/bin/activate && \
  git clone --single-branch --branch '4.7.0' --depth 1 https://github.com/opencv/opencv.git && \
  git clone --single-branch --branch '4.7.0' --depth 1 https://github.com/opencv/opencv_contrib.git && \
  cd opencv && \
  mkdir build && \
  cd build && \
  cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D EIGEN_INCLUDE_PATH=/usr/local/include/eigen3 \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D WITH_TBB=ON \
    -D WITH_EIGEN=ON \
    -D WITH_V4L=ON \
    -D WITH_OPENCL=OFF \
    -D WITH_QT=OFF \
    -D ENABLE_FAST_MATH=ON \
    -D ENABLE_NEON=ON \
    -D BUILD_TBB=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_TESTS=OFF \
    -D BUILD_opencv_python2=OFF \
    -D BUILD_opencv_python3=ON \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D PYTHON_EXECUTABLE=$(which python2) \
    -D PYTHON3_EXECUTABLE=$(which python3) \
    -D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
    -D PYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
    -D OPENCV_PYTHON3_INSTALL_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
    .. && \
  make -j$(nproc --all) && \
  make install && \
  ldconfig && \
  cd .. && \
  rm -rf build && \
  chgrp -R internal /opt/opencv && \
  chmod -R g+rw /opt/opencv && \
  chgrp -R internal /opt/opencv_contrib && \
  chmod -R g+rw /opt/opencv_contrib
WORKDIR /root

# Build and install our fork of rmw_fastrtps
# NOTE: This is needed to fix a bug in the original rmw_fastrtps, regarding
# service servers not tracing client timeout exceptions.
WORKDIR /opt
RUN . dua-venv/bin/activate && \
  git clone --single-branch --branch 'humble' --depth 1 https://github.com/dotX-Automation/rmw_fastrtps.git ros/rmw_fastrtps && \
  cd ros/rmw_fastrtps && \
  . /opt/ros/humble/setup.sh && \
  colcon build --merge-install --ament-cmake-args -DBUILD_TESTING=OFF && \
  rm -rf build log && \
  chgrp -R internal /opt/ros/rmw_fastrtps && \
  chmod -R g+rw /opt/ros/rmw_fastrtps
WORKDIR /root

# Install Cyclone DDS
RUN apt-get update && apt-get install -y --no-install-recommends \
  ros-humble-rmw-cyclonedds-cpp && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*/apt/lists/*

# Install zenoh-bridge-ros2dds
# NOTE: Version 0.10.1-rc.2.
WORKDIR /usr/local/bin
RUN wget -O - https://github.com/eclipse-zenoh/zenoh-plugin-ros2dds/releases/download/0.10.1-rc.2/zenoh-bridge-ros2dds-0.10.1-rc.2-aarch64-unknown-linux-gnu.zip | funzip > zenoh-bridge-ros2dds && \
  chmod a+x zenoh-bridge-ros2dds
WORKDIR /root

# Build and install dua-utils
# The ARG allows us to break cache and rebuild from here upon each new version
WORKDIR /opt
ARG DUA_UTILS_VERSION=20241022-1746
RUN . dua-venv/bin/activate && \
  echo "Building dua-utils version ${DUA_UTILS_VERSION}" && \
  git clone --recursive https://github.com/dotX-Automation/dua-utils.git ros/dua-utils && \
  cd ros/dua-utils && \
  . /opt/ros/humble/setup.sh && \
  colcon build --merge-install && \
  rm -rf build log && \
  chgrp -R internal /opt/ros/dua-utils && \
  chmod -R g+rw /opt/ros/dua-utils
WORKDIR /root

ENV DEBIAN_FRONTEND=dialog

# Finalize image
LABEL description="ARMv8 basic DUA base unit"
LABEL platform="linux/arm64/v8"
CMD ["bash"]
